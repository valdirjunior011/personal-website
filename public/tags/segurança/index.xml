<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Segurança on Valdir Junior</title>
    <link>http://localhost:1313/tags/seguran%C3%A7a/</link>
    <description>Recent content in Segurança on Valdir Junior</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 02 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/seguran%C3%A7a/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dockerfile using Multi-Stage Builds and Secure Images</title>
      <link>http://localhost:1313/posts/otimizando-o-dockerfile-com-multi-stage-builds/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/otimizando-o-dockerfile-com-multi-stage-builds/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/v2/D4E12AQFiVMmK1xCdPA/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1693653766393?e=1758758400&amp;amp;v=beta&amp;amp;t=Bn7TSy9VPWrDtZ0sT9O2sPazDNEfMBP7Kwz8AT67IKw&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;One of the challenges when working with Docker is creating images that are both size-efficient and secure. This article will show an option for optimizing your Dockerfile using Multi-Stage Builds and how the Chainguard tool can be used to ensure Docker image security.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Optimization with Multi-Stage Builds&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Multi-Stage Builds is an advanced Docker technique that allows you to create smaller, more efficient images. The basic idea is to split the image build into multiple stages, each with its own build environment. This is especially useful when you need to compile source code or perform other complex tasks during the image build process.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
