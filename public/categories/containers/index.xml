<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Containers on Valdir Junior</title>
    <link>http://localhost:1313/categories/containers/</link>
    <description>Recent content in Containers on Valdir Junior</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/containers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker Compose: Orchestrating Applications</title>
      <link>http://localhost:1313/posts/docker-compose/</link>
      <pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/docker-compose/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/v2/D4E12AQHiC2c06YoG-w/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1695363689934?e=1758758400&amp;amp;v=beta&amp;amp;t=0KQjIAC6Ne0CooOM3hdPZef5LxIA8Izgw1Q4PibU6fw&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;orchestrating-applications-with-ease&#34;&gt;&#xA;  Orchestrating Applications with Ease&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#orchestrating-applications-with-ease&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;what-is-docker-compose&#34;&gt;&#xA;  What is Docker Compose?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-docker-compose&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Docker Compose is a tool that allows you to define and manage multi-container applications using a&#xA;single YAML file. With it, you can specify the configuration, services, and networks required for&#xA;your application, making container orchestration a much simpler task.&lt;/p&gt;&#xA;&lt;h3 id=&#34;installing-docker-compose&#34;&gt;&#xA;  Installing Docker Compose&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#installing-docker-compose&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;If you don’t have Docker Compose installed yet, follow the instructions in the&#xA;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;official documentation&lt;/strong&gt;&lt;/a&gt; to set it up in your&#xA;environment. Make sure Docker is also installed and running.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Volumes: Share and Persist Data Efficiently</title>
      <link>http://localhost:1313/posts/dominando-docker-volumes/</link>
      <pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/dominando-docker-volumes/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/v2/D4E12AQEerXYc8JGnFA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1694435515394?e=1758758400&amp;amp;v=beta&amp;amp;t=UxGuBTGGWEnDDex9-bjyIXHAQMHQx4tLUMqzjdeY4Us&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;One of the fundamental features that make Docker a popular choice is the ability to persist data&#xA;across container runs. This is possible thanks to Docker volumes. In this article, we’ll explore the&#xA;concept of Docker volumes comprehensively.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;What Are Docker Volumes?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Simply put, Docker volumes are mechanisms that allow data to be shared and persisted between&#xA;containers and the host where Docker is running. They are especially useful for storing data such as&#xA;databases, logs, or any other information that needs to &amp;ldquo;survive&amp;rdquo; beyond a container’s lifecycle.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Distroless: Healthchecks and Auto-Restart</title>
      <link>http://localhost:1313/posts/distroless-no-docker/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/distroless-no-docker/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/v2/D4E12AQGwhxdbDGnDjA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1696490979793?e=1758758400&amp;amp;v=beta&amp;amp;t=ImtknOIDkgq-8dIyXQIsdUdtaiwKKM6Cty88-4Ina9M&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;simplifying-container-image-efficiency&#34;&gt;&#xA;  Simplifying Container Image Efficiency&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#simplifying-container-image-efficiency&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;distroless-what-they-are-and-why-they-matter&#34;&gt;&#xA;  Distroless: What They Are and Why They Matter&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#distroless-what-they-are-and-why-they-matter&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Distroless images are a special class of Docker images that stand out for their minimalist approach.&lt;/p&gt;&#xA;&lt;p&gt;Unlike traditional images that include a full operating system, distroless images contain only what&#xA;is necessary to run an application. This means there are no unnecessary packages or utilities, which&#xA;significantly reduces the container’s attack surface.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Networking Basics: Concepts and Examples</title>
      <link>http://localhost:1313/posts/network-no-docker/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/network-no-docker/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/v2/D4E12AQFcvRWeihIBbg/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1694442094516?e=1758758400&amp;amp;v=beta&amp;amp;t=FHEiicoOMbEloPH5RMlnSD8_vAUMSe_ILdJP2PUn4yk&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Docker Networking Fundamentals&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Before diving into more complex topics, it’s important to understand the fundamental concepts of networking in Docker.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Bridge Network&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;A &lt;strong&gt;bridge network&lt;/strong&gt; is the default network created when you install Docker. It allows containers to communicate with each other on the same network using hostnames.&lt;/p&gt;&#xA;&lt;p&gt;Let’s create a bridge network called &lt;code&gt;my_network&lt;/code&gt; to demonstrate how it works:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker network create my_network&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let’s run two containers on this network:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerfile using Multi-Stage Builds and Secure Images</title>
      <link>http://localhost:1313/posts/otimizando-o-dockerfile-com-multi-stage-builds/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/otimizando-o-dockerfile-com-multi-stage-builds/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/v2/D4E12AQFiVMmK1xCdPA/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1693653766393?e=1758758400&amp;amp;v=beta&amp;amp;t=Bn7TSy9VPWrDtZ0sT9O2sPazDNEfMBP7Kwz8AT67IKw&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;One of the challenges when working with Docker is creating images that are both size-efficient and secure. This article will show an option for optimizing your Dockerfile using Multi-Stage Builds and how the Chainguard tool can be used to ensure Docker image security.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Optimization with Multi-Stage Builds&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Multi-Stage Builds is an advanced Docker technique that allows you to create smaller, more efficient images. The basic idea is to split the image build into multiple stages, each with its own build environment. This is especially useful when you need to compile source code or perform other complex tasks during the image build process.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Securing images using Cosign and Trivy</title>
      <link>http://localhost:1313/posts/garantindo-a-seguran%C3%A7a-das-suas-imagens-docker-com-cosign-e-trivy/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/garantindo-a-seguran%C3%A7a-das-suas-imagens-docker-com-cosign-e-trivy/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/v2/D4E12AQFgNMFMfdYHnA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1693557973466?e=1758758400&amp;amp;v=beta&amp;amp;t=7h4EVwvYmt7k-1ArSh7o1IUs3rYhN73Eqeb-BfSyfgU&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Docker image security is a crucial concern for any IT team. Ensuring the authenticity and integrity of Docker images has become an undeniable priority. Docker images are the fundamental building blocks for deploying containerized applications, and any compromise in their security can result in serious consequences, ranging from data breaches to disruptions of critical services.&lt;/p&gt;&#xA;&lt;p&gt;In this article, we’ll look at how we can use solutions to protect your infrastructure. One of these solutions is Cosign, a Docker image security tool that has become an essential part of any container administrator’s arsenal to ensure image authenticity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Troubleshooting Docker: Tips and Essential Tools</title>
      <link>http://localhost:1313/posts/troubleshooting-no-docker/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/troubleshooting-no-docker/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/v2/D4E12AQGY4YeEnFiIww/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1696495916026?e=1758758400&amp;amp;v=beta&amp;amp;t=swxZ6UQKx7wdEOdygXgMt-0BJMuJNN24qRBcRjZZSFc&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-resource-monitoring&#34;&gt;&#xA;  1. &lt;strong&gt;Resource Monitoring&lt;/strong&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#1-resource-monitoring&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;When facing performance issues in Docker, resource monitoring is essential. Use tools like &lt;strong&gt;Docker Stats&lt;/strong&gt;, &lt;strong&gt;cAdvisor&lt;/strong&gt;, or &lt;strong&gt;Prometheus&lt;/strong&gt; to collect real-time metrics and identify bottlenecks.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker stats &amp;lt;container_name&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-logs-and-logging&#34;&gt;&#xA;  2. &lt;strong&gt;Logs and Logging&lt;/strong&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#2-logs-and-logging&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Docker logs can provide valuable information for troubleshooting. It’s important to configure the log output to a format and driver that suits your needs. Two popular log drivers are &lt;strong&gt;JSON&lt;/strong&gt; and &lt;strong&gt;Syslog&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Docker Uses Linux Kernel Features to Isolate Containers</title>
      <link>http://localhost:1313/posts/como-funciona-o-isolamento-de-containers-utilizado-pelo-docker/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/como-funciona-o-isolamento-de-containers-utilizado-pelo-docker/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/v2/D4E12AQHVJusYLjguHA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1693822466067?e=1758758400&amp;amp;v=beta&amp;amp;t=bPRZ8xzT7u3DhwjV3quxfZMEjyDlriIElSfE-EKA2h0&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Docker has revolutionized the way applications are deployed and managed by using the concept of&#xA;containers. One of the fundamental pillars of this feature is isolation, which enables multiple&#xA;applications to run on a single host without interfering with one another. This isolation is&#xA;achieved through essential Linux kernel features such as Control Groups (CGroups), Namespaces, and&#xA;the unshare command. In this article, we will gain an understanding of these features and how they&#xA;are used to create isolated environments in Docker.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
